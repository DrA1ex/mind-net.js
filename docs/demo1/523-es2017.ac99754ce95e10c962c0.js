!function(){"use strict";function t(t,n,e,o,r,s,i){try{var l=t[s](i),a=l.value}catch(c){return void e(c)}l.done?n(a):Promise.resolve(a).then(o,r)}function n(n){return function(){var e=this,o=arguments;return new Promise(function(r,s){var i=n.apply(e,o);function l(n){t(i,r,s,l,a,"next",n)}function a(n){t(i,r,s,l,a,"throw",n)}l(void 0)})}}function e(t,n){const e=Math.max(t.length,n.length),o=new Array(e);for(let r=0;r<e;r++)o[r]=[t[r],n[r]];return o}function o(t,n){return Array.from(function*(t,n){let e=0;for(const o of t)yield n(o,e),e+=1}(function*(t,n){for(let e=0;e<n;++e)yield e}(0,n),t))}function r(t,n,e){const o=Math.min(t.length,n.length),r=new Array(o);for(let s=0;s<o;++s)r[s]=e(t[s],n[s]);return r}function s(t,n){const e=t.length,o=new Array(e);for(let r=0;r<e;++r)o[r]=n(t[r]);return o}function i(t,n){!function(t,n,e){const o=Math.min(t.length,n.length);for(let r=0;r<o;++r)t[r]=t[r]+n[r]}(t,n)}function l(t,n){return s(t,t=>t*n)}function a(t,n){const e=Math.min(t.length,n.length);let o=0,r=0;for(let s=0;s<e;++s){const e=t[s]*n[s]-r,i=o+e;r=i-o-e,o=i}return o}function c(t,n=0,e=1){const r=e-n;return o(()=>n+Math.random()*r,t)}function u(t,n){const e=new Array(t[0].length),o=Math.min(t.length,n.length);for(let r=0;r<e.length;++r){let s=0,i=0;for(let e=0;e<o;e++){const o=t[e][r]*n[e]-i,l=s+o;i=l-s-o,s=l}e[r]=s}return e}function h(t,n){console.log("***");for(let o=0;o<n.length;o++){const[r,s]=n[o],i=t.compute(r),l=i.map(t=>t.toFixed(2)),a=s.map(t=>t.toFixed(2)),c=e(s,i).map(([t,n])=>(100-100*Math.abs(t-n)).toFixed(1));console.log(`INPUT ${r} OUTPUT ${l} EXPECTED ${a} (accuracy ${c}%)`)}console.log("***")}class f{constructor(t,n){var e;this.neuronCnt=t,this.prevLayer=n;const r=(null===(e=this.prevLayer)||void 0===e?void 0:e.neuronCnt)||0;this.values=function(t,n){return o(()=>0,n)}(0,this.neuronCnt),this.biases=c(this.neuronCnt,-1,1),this.backWeights=r>0?function(t,n,e=0,r=1){return o(t=>c(n,e,r),t)}(this.neuronCnt,r):[]}}class g{constructor(...t){this.layers=new Array(t.length),this.learningRate=.01;for(let n=0;n<t.length;n++)this.layers[n]=new f(t[n],n>0?this.layers[n-1]:void 0)}train(t,n){let e=r(n,this.compute(t),(t,n)=>t-n);for(let o=this.layers.length-2;o>=0;o--){const t=this.layers[o+1],n=this.layers[o],a=l(r(e,s(t.values,t=>t*(1-t)),(t,n)=>t*n),this.learningRate);for(let e=0;e<t.neuronCnt;e++)i(t.backWeights[e],l(n.values,a[e]));i(t.biases,a),null!==n.prevLayer&&(e=u(t.backWeights,e))}}compute(t){let n=this.layers[0];n.values=t;for(let o=1;o<this.layers.length;o++){const t=this.layers[o];for(let o=0;o<t.backWeights.length;o++)t.values[o]=(e=a(t.backWeights[o],n.values)+t.biases[o],1/(1+Math.exp(-e)));n=t}var e;return this.layers[this.layers.length-1].values}}let y=new g(2,5,5,1),p=[],v=0;function d(){return m.apply(this,arguments)}function m(){return(m=n(function*(){const t=Math.ceil(100),n=Math.ceil(100),e=new Array(t*n);for(let o=0;o<t;o++)for(let t=0;t<n;t++){const r=y.compute([.01*o,.01*t]);e[o*n+t]=[...r]}postMessage({type:"training_data",iteration:v,state:e})})).apply(this,arguments)}function T(){return w.apply(this,arguments)}function w(){return(w=n(function*(){if(v>=8e8||0===p.length)return void setTimeout(T,300);const t=performance.now(),n=p.map(t=>[[t.x,t.y],[t.type]]);for(let e=0;e<8e4;e++){const t=n[Math.floor(Math.random()*n.length)];y.train(t[0],t[1])}h(y,n.slice(0,1)),v+=8e4,console.log(`*** TRAINING OVER ${p.length} SET WITH 80000 ITERATIONS FINISHED IN ${(performance.now()-t).toFixed(2)}ms`),yield d(),v>=8e8&&(console.log("*** DATA SET TRAINING FINISHED ***"),h(y,n)),setTimeout(T,1)})).apply(this,arguments)}addEventListener("message",({data:t})=>{var n,e;switch(t.type){case"add_point":p.push(t.point),v=0;break;case"set_points":p=t.points,v=0;break;case"refresh":const o=(null===(n=t.config)||void 0===n?void 0:n.layers)||[5,5],r=(null===(e=t.config)||void 0===e?void 0:e.learningRate)||.01;y=new g(2,...o,1),y.learningRate=r,v=0}}),setTimeout(T,1)}();